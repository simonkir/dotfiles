* INTRODUCTION
my emacs config, this file is loaded in =init.el=, which adds more general features like =use-package=
** HIERACHY
the further up a heading / subheading, the more important it is. each config snippet thould be on the most important heading it adresses (e. g. color parenthesis is at /editing â†’ parenthesis/ instead of /appearance/).
* evil mode
evil config / plugins need to be loaded before everything else because of variable definitions
** general settings
*** setup
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-respect-visual-line-mode t)
    :config
    (evil-mode 1))
#+end_src
*** initial states
#+begin_src emacs-lisp
  (setq evil-emacs-state-modes nil)
  (setq evil-motion-state-modes nil)
#+end_src
** evil-org
#+begin_src emacs-lisp
  (use-package evil-org
    :ensure t
    :config
    (add-hook 'org-mode-hook 'evil-org-mode))
#+end_src
** evil-magit
#+begin_src emacs-lisp
  (use-package evil-magit
    :ensure t)
#+end_src
* editing
** general editing
*** easier kill ring
=M-y= shows a completion from all previously cut stuff
#+begin_src emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+end_src
*** text scale
#+begin_src emacs-lisp
  (evil-define-key 'normal 'global
    (kbd "SPC +") 'text-scale-adjust
    (kbd "SPC -") 'text-scale-adjust)
#+end_src
** coding
*** parenthesis
**** auto-close
#+begin_src emacs-lisp
  (electric-pair-mode t)
#+end_src
**** color parenthesis
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src
**** surround.vim
#+begin_src emacs-lisp
  (use-package evil-surround
    :ensure t
    :config (global-evil-surround-mode 1))
#+end_src
*** autocompletion
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (add-hook 'after-init-hook 'global-company-mode))
#+end_src
**** tab-and-go
emulates vim =TAB= press to open completion, =Tab= and =S-TAB= to cycle through menu, and just continuing typing to end completion
#+begin_src emacs-lisp
  (add-hook 'after-init-hook 'company-tng-mode)
#+end_src
*** snippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))
    (yas-global-mode)
#+end_src
*** pretty symbols
pretty symbols for eye candy when editing code
**** pretty-mode
package, contains more symbols, e. g. for python
#+begin_src emacs-lisp
  (use-package pretty-mode
    :ensure t
    :config
    (global-pretty-mode t))
#+end_src
** writing
*** visual-fill-column-mode
for more focused writing
#+begin_src emacs-lisp
  (use-package visual-fill-column
    :ensure t
    :init
    (setq visual-fill-column-center-text t))

  (evil-define-key 'normal 'global
    (kbd "SPC t v") 'visual-fill-column-mode
    (kbd "SPC t V") 'set-fill-column)
#+end_src
*** spell checking
#+begin_src emacs-lisp
  (setq flyspell-issue-message-flag nil)

  (defun sk:flyspell-mode ()
    (interactive)
    (if (bound-and-true-p flyspell-mode)
        (flyspell-mode 0)
      (flyspell-mode 1)
      (flyspell-buffer)))

  (evil-define-key 'normal 'global
    (kbd "SPC t s") 'sk:flyspell-mode
    (kbd "SPC t S") 'ispell-change-dictionary)
#+end_src
* navigation
** navigating within a window
*** avy
navigate to any char in a buffer using =M-s=
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+end_src
** navigating windows
*** functions
functions that move the cursor when the window is split
#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
#+end_src
*** keybinds
**** manage windows
#+begin_src emacs-lisp
  (evil-define-key 'normal 'global
    (kbd "SPC w =") 'balance-windows
    (kbd "SPC w o") 'delete-other-windows
    (kbd "SPC w 1") 'delete-other-windows)
#+end_src
**** switch windows
#+begin_src emacs-lisp
  (evil-define-key 'normal 'global
    (kbd "SPC w h") 'evil-window-left
    (kbd "SPC w j") 'evil-window-down
    (kbd "SPC w k") 'evil-window-up
    (kbd "SPC w l") 'evil-window-right)

  (evil-define-key 'normal 'global
    (kbd "SPC w w") 'evil-window-next
    (kbd "SPC SPC") 'evil-window-next
    (kbd "SPC w c") 'evil-window-delete
    (kbd "SPC w C") 'kill-buffer-and-window)
#+end_src
**** split windows
#+begin_src emacs-lisp
  (evil-define-key 'normal 'global
    (kbd "SPC w s") 'split-and-follow-horizontally
    (kbd "SPC w v") 'split-and-follow-vertically)
#+end_src
** navigating buffers
*** general keybinds
some mappings around ido and buffer switching
#+begin_src emacs-lisp
  ;; entire buffer
  (evil-define-key 'normal 'global
    (kbd "C-x C-b") 'ibuffer
    (kbd "SPC b B") 'ibuffer)

  ;; popup menu
  (evil-define-key 'normal 'global
    (kbd "C-x b") 'ido-switch-buffer
    (kbd "SPC b b") 'ido-switch-buffer)
#+end_src
*** kill current buffer
#+begin_src emacs-lisp
  (defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))

  (evil-define-key 'normal 'global
    (kbd "C-x k") 'kill-current-buffer
    (kbd "SPC b k") 'kill-current-buffer
    (kbd "SPC b K") 'kill-buffer-and-window)
#+end_src
** navigating files
*** general keybinds
#+begin_src emacs-lisp
  (evil-define-key 'normal 'global 
    (kbd "SPC f f") 'find-file
    (kbd "SPC f F") 'find-file-read-only
    (kbd "SPC f r") 'recentf-open-files
    (kbd "SPC s") 'save-buffer
    (kbd "SPC f s") 'save-buffer
    (kbd "SPC f S") 'save-some-buffers)
#+end_src
*** dired
some mappings for a more vim-like behaviour
#+begin_src emacs-lisp
  (evil-define-key 'normal 'global
    (kbd "SPC f d") 'dired-jump
    (kbd "SPC f D") 'dired)

  (evil-define-key 'normal dired-mode-map
    (kbd "h") 'dired-up-directory
    (kbd "l") 'dired-find-file)
#+end_src
*** help mode
#+begin_src emacs-lisp
  (evil-define-key 'normal 'global
    (kbd "SPC h f") 'describe-function
    (kbd "SPC h v") 'describe-variable
    (kbd "SPC h k") 'describe-key)
#+end_src
*** config operations
**** edit
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/conf.org"))
    
  (evil-define-key 'normal 'global
    (kbd "SPC c v") 'config-visit
    (kbd "SPC c e") 'config-visit)
#+end_src
**** reload
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/conf.org")))
    
  (evil-define-key 'normal 'global (kbd "SPC c r") 'config-reload)
#+end_src
** quitting
#+begin_src emacs-lisp
  (evil-define-key 'normal 'global 
    (kbd "SPC ESC") 'keyboard-escape-quit
    (kbd "SPC q") 'save-buffers-kill-terminal
    (kbd "SPC Q") 'save-buffers-kill-emacs)
#+end_src
* general behaviour
** which key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+end_src
** ido
replace default emacs menues with more interactive ones, e. g. when opening files
*** enable ido
#+begin_src emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+end_src
*** ido-vertical
#+begin_src emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :config
    (ido-vertical-mode 1))
  ;;(setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+end_src
*** smex
wrapper around ido that improves =M-x=
#+begin_src emacs-lisp
  (use-package smex
    :ensure t
    :config (smex-initialize)
    :bind
    ("M-x" . smex))
#+end_src
** misc
#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
  (defalias 'yes-or-no 'y-or-n-p)
  ;;(setq make-backup-file nil)
  ;;(setq ring-bell-function 'ignore)
#+end_src
* mode- / package-specific configuration
exception: evil mode stuff
** org
*** general settings
#+begin_src emacs-lisp
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.4))
#+end_src
**** don't spread across two windows
e. g. when opening a src block with =C-c '=
#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src
*** keybinds
**** toggling
#+begin_src emacs-lisp
  (evil-define-key 'normal org-mode-map
    (kbd "SPC o -") 'org-table-insert-hline
    (kbd "SPC o h") 'org-toggle-heading
    (kbd "SPC o i") 'org-toggle-item
    (kbd "SPC o t") 'org-todo
    (kbd "SPC o b") 'org-cycle-list-bullet
    (kbd "SPC o c") 'org-babel-execute-src-block
    (kbd "SPC o RET") 'org-toggle-checkbox)
#+end_src
**** preview / export
#+begin_src emacs-lisp
  (evil-define-key 'normal org-mode-map
    (kbd "SPC o x") 'org-export-dispatch
    (kbd "SPC p p") 'org-latex-preview
    (kbd "SPC p i") 'org-toggle-inline-images)
#+end_src
*** org babel / source code
**** general settings
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src
**** langagues
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   (append org-babel-load-languages
           '((python . t))))
#+end_src
*** org-indent
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src
** latex
*** general settings
#+begin_src emacs-lisp
  (add-hook 'LaTeX-mode-hook 'prettify-symbols-mode)
  (setq-default preview-scale-function 1.4)
#+end_src
*** auctex
**** installation
#+begin_src emacs-lisp
  (use-package auctex
    :defer t
    :ensure t
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t))
#+end_src
**** default pdf viewer
#+begin_src emacs-lisp
  (setq TeX-view-program-selection '((output-pdf "Zathura")))
#+end_src
**** math mode
#+begin_src emacs-lisp
  (setq LaTeX-math-abbrev-prefix "'")
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
#+end_src
*** keybinds
**** compilation / preview
#+begin_src emacs-lisp
  (evil-define-key 'normal LaTeX-mode-map
    (kbd "SPC l l") 'TeX-command-master
    (kbd "SPC l a") 'TeX-command-run-all
    (kbd "SPC p p") 'preview-at-point
    (kbd "SPC p P") 'preview-clearout-at-point
    (kbd "SPC p b") 'preview-buffer
    (kbd "SPC p B") 'preview-clearout-buffer)
#+end_src
**** command insertion
#+begin_src emacs-lisp
  (evil-define-key 'normal LaTeX-mode-map
    (kbd "SPC l s") 'LaTeX-section          ;; insert section
    (kbd "SPC l e") 'LaTeX-environment      ;; insert environment
    (kbd "SPC l f") 'LaTeX-fill-environment) ;; auto-indent
#+end_src
** docview
*** vim-like keybinds
#+begin_src emacs-lisp
  (setq doc-view-continuous t)
  (evil-define-key 'normal doc-view-mode-map
    (kbd "j") 'doc-view-next-line-or-next-page
    (kbd "J") 'doc-view-next-page
    (kbd "k") 'doc-view-previous-line-or-previous-page
    (kbd "K") 'doc-view-previous-page
    (kbd "gg") 'doc-view-first-page)
#+end_src

**** function for goto-page
#+begin_src emacs-lisp
  (defun sk:doc-view-goto-page (count)
    "Goto page COUNT
  if COUNT isn't supplied, go to the last page"
      (interactive "P")
      (if count
          (doc-view-goto-page count)
        (doc-view-last-page)))

  (evil-define-key 'normal doc-view-mode-map
    (kbd "G") 'sk:doc-view-goto-page)
#+end_src
** magit
*** installation
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src
*** mappings
#+begin_src emacs-lisp
(evil-define-key 'normal 'global (kbd "SPC g") 'magit)
  (add-hook 'git-commit-mode-hook 'evil-insert-state)
#+end_src
* appearance
** general settings
settings regarding the application and the frame
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src
** line numbers
use visual instead of absolute or relative line numbers
visual line numbers are determined with lines visible on the screen instead of buffer lines.
for example, in ='visual= a fold is shown as 1 line, whereas in ='relative=, it is shown as the amount of lines that are folded (this subheading would then be 12 lines).
#+begin_src emacs-lisp
  ;; display line / column numbers in modeline
  (line-number-mode 1)
  (column-number-mode 1)

  ;; display visual line numbers left of each buffer
  (setq display-line-numbers-type 'visual)
  (global-display-line-numbers-mode 1)
  
  (global-visual-line-mode)
#+end_src
** theme
use =M-x customize-themes= to change theme settings
*** doom themes
- [ ] enable bold/italics support
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config (doom-themes-org-config)) ;; Corrects (and improves) org-mode's native fontification.

  (when window-system (global-hl-line-mode t))
#+end_src
** modeline
use doom-modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :config
    (doom-modeline-mode 't))

  ;; needs to be set explicitly when running in server mode
  (setq doom-modeline-icon t)
  (setq doom-modeline-buffer-encoding nil)
#+end_src
** startup screen
#+begin_src emacs-lisp
  ;;(setq inhibit-startup-message t)
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))) ;; emacsclient defaults to *scratch*
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10)))
    (setq dashboard-center-content t))
#+end_src
