* README
my emacs config, this file is loaded in =init.el=, which adds more general features like =use-package=
** HIERACHY
the further up a heading / subheading, the more important it is. each config snippet thould be on the most important heading it adresses (e. g. color parenthesis is at /editing → parenthesis/ instead of /appearance/).
* init lines
** performance improvements
a lot of useful tips can be found in the doom emacs faq
*** =lexical-binding: t=
#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t; -*-
#+end_src
*** disable garbage collection
#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum)
  (setq gc-cons-percentage 0.6)
  (add-hook 'emacs-startup-hook '(lambda () (setq gc-cons-threshold 16777216) (setq gc-cons-percentage 0.1)))
#+end_src
*** unset =fnah=
#+begin_src emacs-lisp
  (defvar sk:file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
  (add-hook 'emacs-startup-hook '(lambda () (setq file-name-handler-alist sk:file-name-handler-alist)))
#+end_src
** package management
*** use-package
#+begin_src emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives
              '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+end_src
*** general-el
#+begin_src emacs-lisp
  (use-package general
    :demand t
    :ensure t)
#+end_src
* global config
** evil mode
evil config need to be loaded before everything else because of variable definitions
*** setup
#+begin_src emacs-lisp
  (use-package evil
    :demand t
    :ensure t
    :init
    (setq evil-respect-visual-line-mode t
          evil-want-integration t
          evil-want-keybinding nil)

    :config
    (setq evil-emacs-state-modes nil
          evil-motion-state-modes nil)
    (evil-mode 1)

    :general ('insert
              "C-k" 'evil-previous-line
              "C-j" 'evil-next-line
              "C-h" 'backward-char
              "C-l" 'forward-char))
#+end_src
*** evil-collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :demand t
    :ensure t
    :config
    (evil-collection-init))
#+end_src
** interaction
*** general settings
#+begin_src emacs-lisp
  (defalias 'yes-or-no 'y-or-n-p)
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
*** which key
#+begin_src emacs-lisp
  (use-package which-key
    :defer 4
    :ensure t
    :config
    (which-key-mode))
#+end_src
*** ido
replace default emacs menues with more interactive ones, e. g. when opening files
**** setup
#+begin_src emacs-lisp
  (use-package ido
    :demand t
    :config
    (defun sk:ido-custom-keys ()
      (general-def ido-completion-map
           "C-d" 'ido-kill-buffer-at-head
           "C-n" 'ido-next-match
           "C-j" 'ido-next-match
           "C-k" 'ido-prev-match
           "C-p" 'ido-prev-match))

    (setq sk:ido-unignored-buffers '("*dashboard*"))
    (defun sk:ido-ignore-buffers-fun (name)
      "Ignore all *starred* buffers except the ones listed in sk:ido-unignored-buffers"
      (and (string-match "^\*" name)
          (not (member name sk:ido-unignored-buffers))))
    (add-to-list 'ido-ignore-buffers 'sk:ido-ignore-buffers-fun)

    (defun recentf-ido-find-file ()
      "Find a recent file using Ido."
      (interactive)
      (let ((file (ido-completing-read "Choose recent file: " recentf-list nil t)))
        (when file
          (find-file file))))

    (defun ido-bookmark-jump (bname)
      "Switch to bookmark interactively using `ido'."
      (interactive (list (ido-completing-read "Bookmark: " (bookmark-all-names) nil t)))
      (bookmark-jump bname))
    (add-hook 'after-init-hook 'bookmark-save)

    (setq ido-enable-flex-matching nil
          ido-create-new-buffer 'always
          ido-everywhere t)
    (ido-mode 1)

    :hook
    (ido-setup . sk:ido-custom-keys)

    :general ('normal override
                      "SPC b b" 'ido-switch-buffer
                      "SPC f b" 'ido-bookmark-jump))
#+end_src
**** ido-vertical
#+begin_src emacs-lisp
  (use-package ido-vertical-mode
    :after ido
    :demand t
    :ensure t
    :config
    (ido-vertical-mode 1))
#+end_src
**** smex
wrapper around ido that improves =M-x=
#+begin_src emacs-lisp
  (use-package smex
    :after ido
    :demand t
    :ensure t
    :config
    (smex-initialize)

    :general
    ("M-x" 'smex)
    ('normal override "SPC x" 'smex))
#+end_src
** navigation
*** within a window
**** scrolling
#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
  (setq scroll-margin 5) ;; begin scrolling when the cursor is 5 lines above the last displayed line
  
  (general-def 'normal override
   "SPC t f" 'follow-mode)
#+end_src
**** avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :general ('(normal visual) override :prefix "SPC a"
              "a" 'avy-goto-word-or-subword-1
              "c" 'avy-goto-char-timer
              "w" 'avy-goto-word-or-subword-1
              "W" 'avy-goto-word
              "l" 'avy-goto-line
              "j" 'avy-goto-line-below
              "k" 'avy-goto-line-above))
#+end_src
*** windows
#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))

  (general-def 'normal override :prefix "SPC w"
   "=" 'balance-windows
   "o" 'delete-other-windows
   "1" 'delete-other-windows
   "s" 'split-and-follow-horizontally
   "v" 'split-and-follow-vertically

   "h" 'evil-window-left
   "j" 'evil-window-down
   "k" 'evil-window-up
   "l" 'evil-window-right
   "w" 'evil-window-next
   "c" 'evil-window-delete
   "C" 'kill-buffer-and-window)

  (general-def 'normal override
   "SPC ," 'evil-window-next)
#+end_src
*** buffers
some mappings around ido and buffer switching
#+begin_src emacs-lisp
  (defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))

  (general-def 'normal override :prefix "SPC b"
   "q" 'quit-window
   "k" 'kill-current-buffer
   "K" 'kill-buffer-and-window)
   
  (use-package ibuffer
    :general ('normal override "SPC b B" 'ibuffer))
#+end_src
*** files
**** visiting / saving
#+begin_src emacs-lisp
  (general-def 'normal override :prefix "SPC f"
   "f" 'find-file
   "F" 'find-file-read-only
   "R" 'revert-buffer
   "s" 'save-buffer
   "S" 'save-some-buffers
   "B" 'bookmark-set)

  (general-def 'normal override
   "SPC s" 'save-buffer)
#+end_src
**** recentf
#+begin_src emacs-lisp
  (use-package recentf
    :defer 5
    :config
    (recentf-mode t)
    (setq recentf-max-saved-items 100)
    
    :general ('normal override
                      "SPC f r" 'recentf-ido-find-file))
#+end_src
**** dired
#+begin_src emacs-lisp
  (use-package dired
    :hook
    (dired-mode . dired-hide-details-mode)

    :config
    (setq dired-dwim-target t) ;; when two windows are next to each other, move / copy files between them

    :general ('normal override :prefix "SPC f"
                      "d" 'dired-jump
                      "D" 'dired)

             ('normal dired-mode-map
                      "v" 'dired-view-file
                      "h" 'dired-up-directory
                      "l" 'dired-find-file))
#+end_src
*** misc
**** quitting
#+begin_src emacs-lisp
  (general-def 'normal override :prefix "SPC"
   "ESC" 'keyboard-escape-quit
   "q" 'save-buffers-kill-terminal
   "Q" 'save-buffers-kill-emacs)
#+end_src
**** help mode
#+begin_src emacs-lisp
  (general-def 'normal override :prefix "SPC h"
   "f" 'describe-function
   "v" 'describe-variable
   "k" 'describe-key)
#+end_src
**** config operations
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/conf.org"))
    
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/conf.org")))
    
  (general-def 'normal override :prefix "SPC c"
   "r" 'config-reload
   "v" 'config-visit
   "e" 'config-visit)
#+end_src
** usage
*** editing
**** parenthesis
***** electric
#+begin_src emacs-lisp
  (use-package electric
    :demand t
    :hook
    ((org-mode . sk:electric-add-latex-parenthesis)
     (LaTeX-mode . sk:electric-add-latex-parenthesis))

    :config
    (electric-pair-mode t)

    (add-to-list 'electric-pair-pairs '(8218 . 8216)) ;; ‚‘
    (add-to-list 'electric-pair-pairs '(8222 . 8220)) ;; „“

    (defun sk:electric-add-latex-parenthesis ()
      (interactive)
      (make-local-variable 'electric-pair-pairs)
      (add-to-list 'electric-pair-pairs '(36 . 36)))) ;; $$
#+end_src
***** surround.vim
#+begin_src emacs-lisp
  (use-package evil-surround
    :after evil
    :defer 1
    :ensure t
    :config
    (global-evil-surround-mode 1))
#+end_src
***** color parenthesis
#+begin_src emacs-lisp
  (show-paren-mode)
  (use-package rainbow-delimiters
    :ensure t
    :hook
    (prog-mode . rainbow-delimiters-mode))
#+end_src
**** alignment
#+begin_src emacs-lisp
  (use-package evil-lion
    :after evil
    :ensure t
    :general ('(normal visual) override :prefix "g"
              "l" 'evil-lion-left
              "L" 'evil-lion-right))
#+end_src
*** inserting
**** autocompletion
***** company
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :general (company-active-map
              "C-w" 'evil-delete-backward-word)

    :config
    (setq company-idle-delay 0.3)
    (setq company-minimum-prefix-length 2)

    :hook
    ((after-init . company-tng-mode)
     (after-init . global-company-mode)))
#+end_src
***** backends
#+begin_src emacs-lisp
  (use-package company-math
    :after company
    :demand t
    :ensure t
    :config
    (add-to-list 'company-backends 'company-math-symbols-unicode))
#+end_src
**** snippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :demand t
    :ensure t
    :config
    (yas-global-mode))

  (use-package yasnippet-snippets
    :after yasnippet
    :demand t
    :ensure t
    :config
    (yas-reload-all))
#+end_src
**** easier kill ring
=M-y= shows a completion from all previously cut stuff
#+begin_src emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :general ('insert
    "M-y" 'popup-kill-ring))
#+end_src
*** visual aids
**** spell checking
#+begin_src emacs-lisp
  (use-package flyspell
    :config
    (setq flyspell-issue-message-flag nil)

    (defun sk:flyspell-mode ()
      (interactive)
      (if (bound-and-true-p flyspell-mode)
          (flyspell-mode 0)
        (flyspell-mode 1)
        (flyspell-buffer)))

    :general ('normal override :prefix "SPC t"
                      "s" 'sk:flyspell-mode
                      "S" 'ispell-change-dictionary))
#+end_src
**** visual-fill-column-mode
for more focused writing
#+begin_src emacs-lisp
  (use-package visual-fill-column
    :ensure t
    :config
    (setq visual-fill-column-center-text t)

    :general ('normal override :prefix "SPC t"
                      "v" 'visual-fill-column-mode
                      "V" 'set-fill-column))
#+end_src
**** text scale
#+begin_src emacs-lisp
  (general-def 'normal override :prefix "SPC"
   "0" 'text-scale-mode
   "+" 'text-scale-adjust
   "-" 'text-scale-adjust)
#+end_src
**** pretty symbols
pretty symbols for eye candy when editing code
#+begin_src emacs-lisp
  (use-package pretty-mode
    :after python
    :ensure t
    :hook
    (python-mode . turn-on-pretty-mode))
#+end_src
**** mixed-pitch-mode
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :family "Source Code Pro" :height 100)
  (set-face-attribute 'fixed-pitch nil :family "Source Code Pro")
  (set-face-attribute 'variable-pitch nil :family "Noto Serif")

  (use-package mixed-pitch
    :ensure t
    :config
    (setq mixed-pitch-variable-pitch-cursor nil) ;; keep filled cursor

    :hook
    ((org-mode TeX-mode) . mixed-pitch-mode)

    :general ('normal override
                      "SPC t m" 'mixed-pitch-mode))
#+end_src
* local config
exception: evil mode stuff
** julia
#+begin_src emacs-lisp
  (use-package julia-mode
    :defer t
    :ensure t)
#+end_src
** jupyter
#+begin_src emacs-lisp
  (use-package jupyter
    :defer t
    :ensure t)
#+end_src
** org
*** general settings
#+begin_src emacs-lisp
  (use-package org
    :defer t
    :config
    (setq org-src-window-setup 'current-window) ;; don't spread across two windows

    ;; section numbering & indentation
    (setq org-hide-leading-stars t)
    (setq org-num-max-level 4)
    (add-hook 'org-mode-hook 'org-num-mode)
    (add-hook 'org-mode-hook 'org-indent-mode)

    ;; beautify fonts & font effects
    (setq org-hide-emphasis-markers t
          org-fontify-whole-heading-line t
          org-fontify-done-headline t
          org-fontify-quote-and-verse-blocks t)

    (setq org-list-demote-modify-bullet
          '(("+" . "-") ("-" . "+")
            ("1." . "-") ("1)" . "-")))

    ;;(setq org-src-tab-acts-natively t)
    (setq org-confirm-babel-evaluate nil)
    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)

    ;; latex preview options
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
    (setq org-latex-packages-alist '())
    (add-to-list 'org-latex-packages-alist '("" "IEEEtrantools" t))

    (org-babel-do-load-languages
     'org-babel-load-languages
     (append org-babel-load-languages
             '((jupyter . t))))

    :general ('normal
              "SPC e" 'org-edit-src-exit)
              
             ('normal
              "SPC e" 'org-edit-special)

             ('normal org-mode-map
                      "RET" 'org-ctrl-c-ctrl-c)

             ('normal org-mode-map :prefix "SPC SPC"
                      "o" 'org-ctrl-c-minus
                      "-" 'org-ctrl-c-minus
                      "i" 'org-ctrl-c-minus
                      "b" 'org-ctrl-c-minus
                      "E" 'org-babel-execute-buffer
                      "n" 'org-num-mode
                      "TAB" 'org-table-toggle-column-width
                      "<backtab>" '(lambda () (interactive) (org-table-toggle-column-width '(4)))
                      "c" '(lambda () (interactive) (org-ctrl-c-ctrl-c '(4)))
                      "h" 'org-toggle-heading
                      "t" 'org-todo
                      "X" 'org-export-dispatch
                      "x" '(lambda () (interactive) (org-export-dispatch '(4))))

             ('normal org-mode-map :prefix "SPC p"
                      "p" 'org-latex-preview
                      "P" '(lambda () (interactive) (org-latex-preview '(4)))
                      "b" '(lambda () (interactive) (org-latex-preview '(16)))
                      "B" '(lambda () (interactive) (org-latex-preview '(64)))
                      "I" 'org-toggle-inline-images
                      "i" 'org-display-inline-images))
#+end_src
*** superstar
#+begin_src emacs-lisp
  (use-package org-superstar
    :after org
    :ensure t
    :config
    (setq org-superstar-headline-bullets-list '("❃" "★" "✦" "•" "☆" "✧")
          org-superstar-item-bullet-alist '((42 . 8226) (43 . "→") (45 . 8211)))

    :hook
    (org-mode . org-superstar-mode))
#+end_src
*** keybinds
#+begin_src emacs-lisp
  (use-package evil-org
    :after org
    :ensure t
    :hook
    (org-mode . evil-org-mode))
#+end_src
** auctex
#+begin_src emacs-lisp
  (use-package tex
    :ensure auctex
    :defer t
    :config
    (setq TeX-auto-save t
          TeX-parse-self t

          TeX-view-program-selection '((output-pdf "Zathura"))
          preview-auto-cache-preamble t
          
          LaTeX-math-abbrev-prefix "#")
    
    (setq-default preview-scale-function 1.5)

    :hook
    (LaTeX-mode . LaTeX-math-mode)
    (LaTeX-mode . prettify-symbols-mode)

    :general ('normal TeX-mode-map :prefix "SPC SPC"
                      "s"   'LaTeX-section           ;; insert section
                      "e"   'LaTeX-environment       ;; insert environment
                      "TAB" 'LaTeX-fill-environment  ;; auto-indent
                      "l"   'TeX-command-master
                      "L"   'TeX-command-run-all)

             ('normal TeX-mode-map :prefix "SPC p"
                      "p" 'preview-at-point
                      "P" 'preview-clearout-at-point
                      "b" 'preview-buffer
                      "B" 'preview-clearout-buffer))

  ;; not in use-package because of org-mode latex blocks
  (setq texmathp-tex-commands '())
  (add-to-list 'texmathp-tex-commands (quote ("IEEEeqnarray" env-on
                                              "IEEEeqnarray*" env-on)))
#+end_src
** docview
#+begin_src emacs-lisp
  (use-package doc-view
    :defer t
    :config
    (setq doc-view-continuous t)

    (defun sk:doc-view-goto-page (count)
      "Goto page COUNT
    if COUNT isn't supplied, go to the last page"
        (interactive "P")
        (if count
            (doc-view-goto-page count)
          (doc-view-last-page)))

    :general ('normal doc-view-mode-map
                      "G" 'sk:doc-view-goto-page))
#+end_src
** magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :hook
    (git-commit-mode . evil-insert-state)

    :general ('normal override
                      "SPC g" 'magit-file-dispatch))
#+end_src
* appearance
** general settings
use visual instead of absolute or relative line numbers
visual line numbers are determined with lines visible on the screen instead of buffer lines.
for example, in ='visual= a fold is shown as 1 line, whereas in ='relative=, it is shown as the amount of lines that are folded (this subheading would then be 12 lines).
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  
  ;; display line / column numbers in modeline
  (line-number-mode 1)
  (column-number-mode 1)

  ;; display visual line numbers left of each buffer
  (setq display-line-numbers-type 'visual)
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode)
#+end_src
** theme
use =M-x customize-themes= to change theme settings
#+begin_src emacs-lisp
  (use-package doom-themes
    :demand t
    :ensure t
    :config
    (global-hl-line-mode)
    (doom-themes-org-config)) ;; Corrects (and improves) org-mode's native fontification.

#+end_src
** modeline
use doom-modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :demand t
    :ensure t
    :config
    (doom-modeline-mode 't)

    ;; needs to be set explicitly when running in server mode
    (setq doom-modeline-icon t
          doom-modeline-buffer-encoding nil))
#+end_src
** startup screen
#+begin_src emacs-lisp
  ;;(setq inhibit-startup-message t)
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))) ;; emacsclient defaults to *scratch*
  (use-package dashboard
    :demand t
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((bookmarks . 10) (recents . 10))
          dashboard-startup-banner 'logo
          dashboard-set-heading-icons t
          dashboard-set-file-icons t
          dashboard-center-content t))
#+end_src
