* README
my emacs config, this file is loaded in =init.el=, which adds more general features like =use-package=
** HIERACHY
the further up a heading / subheading, the more important it is. each config snippet thould be on the most important heading it adresses (e. g. color parenthesis is at /editing → parenthesis/ instead of /appearance/).
* init lines
** performance improvements
a lot of useful tips can be found in the doom emacs faq
*** =lexibal-binding: t=
#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t; -*-
#+end_src
*** disable garbage collection
#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum)
  (setq gc-cons-percentage 0.6)
  (add-hook 'emacs-startup-hook '(lambda () (setq gc-cons-threshold 16777216) (setq gc-cons-percentage 0.1)))
#+end_src
*** unset =fnah=
#+begin_src emacs-lisp
  (defvar sk:file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
  (add-hook 'emacs-startup-hook '(lambda () (setq file-name-handler-alist sk:file-name-handler-alist)))
#+end_src
** package management
*** use-package
#+begin_src emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives
              '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)

  (unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

  (setq use-package-always-defer t)
#+end_src
*** general-el
#+begin_src emacs-lisp
  (use-package general
    :demand t
    :ensure t)
#+end_src
* global config
** evil mode
evil config need to be loaded before everything else because of variable definitions
*** setup
#+begin_src emacs-lisp
  (use-package evil
    :demand t
    :ensure t
    :init
    (setq evil-respect-visual-line-mode t
          evil-want-integration t
          evil-want-keybinding nil)
    :config
    (evil-mode 1))

  (setq evil-emacs-state-modes nil
        evil-motion-state-modes nil)
#+end_src
*** evil-collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :demand t
    :ensure t
    :config
    (evil-collection-init))
#+end_src
** navigation
*** within a window
**** scrolling
#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
  (setq scroll-margin 5) ;; begin scrolling when the cursor is 5 lines above the last displayed line
  
  (general-define-key
   :states 'normal
   :keymaps 'override
   "SPC t f" 'follow-mode)
#+end_src
**** insert mode
#+begin_src emacs-lisp
  (general-define-key
   :states 'insert
   "C-k" 'evil-previous-line
   "C-j" 'evil-next-line
   "C-h" 'backward-char
   "C-l" 'forward-char)
#+end_src
**** avy
navigate to any char in a buffer using =M-s=
#+begin_src emacs-lisp
  (use-package avy
    :ensure t)

  (general-define-key
   :states '(normal visual)
   :keymaps 'override
   :prefix "SPC a"
   "a" 'avy-goto-word-or-subword-1
   "c" 'avy-goto-char-timer
   "w" 'avy-goto-word-or-subword-1
   "W" 'avy-goto-word
   "l" 'avy-goto-line
   "j" 'avy-goto-line-below
   "k" 'avy-goto-line-above)
#+end_src
*** windows
#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))

  (general-define-key
   :states 'normal
   :keymaps 'override
   :prefix "SPC w"
   "=" 'balance-windows
   "o" 'delete-other-windows
   "1" 'delete-other-windows
   "s" 'split-and-follow-horizontally
   "v" 'split-and-follow-vertically

   "h" 'evil-window-left
   "j" 'evil-window-down
   "k" 'evil-window-up
   "l" 'evil-window-right
   "w" 'evil-window-next
   "c" 'evil-window-delete
   "C" 'kill-buffer-and-window)

  (general-define-key
   :states 'normal
   :keymaps 'override
   "SPC SPC" 'evil-window-next)
#+end_src
*** buffers
some mappings around ido and buffer switching
#+begin_src emacs-lisp
  (defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))

  (general-define-key
   :states 'normal
   :keymaps 'override
   :prefix "SPC b"
   "b" 'ido-switch-buffer
   "B" 'ibuffer
   "q" 'quit-window
   "k" 'kill-current-buffer
   "K" 'kill-buffer-and-window)
#+end_src
*** files
**** visiting / saving
#+begin_src emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'override
   :prefix "SPC f"
   "f" 'find-file
   "F" 'find-file-read-only
   "r" 'recentf-ido-find-file
   "R" 'revert-buffer
   "s" 'save-buffer
   "S" 'save-some-buffers
   "b" 'ido-bookmark-jump
   "B" 'bookmark-set
   "d" 'dired-jump
   "D" 'dired)

  (general-define-key
   :states 'normal
   :keymaps 'override
   "SPC s" 'save-buffer)
#+end_src
**** dired
#+begin_src emacs-lisp
  (add-hook 'dired-mode-hook 'dired-hide-details-mode)
  (setq dired-dwim-target t) ;; when two windows are next to each other, move / copy files between them
  
  ;;some mappings for a more vim-like behaviour
  (with-eval-after-load 'dired
    (general-define-key
    :states 'normal
    :keymaps 'dired-mode-map
    "v" 'dired-view-file
    "h" 'dired-up-directory
    "l" 'dired-find-file))
#+end_src
*** misc
**** quitting
#+begin_src emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'override
   :prefix "SPC"
   "ESC" 'keyboard-escape-quit
   "q" 'save-buffers-kill-terminal
   "Q" 'save-buffers-kill-emacs)
#+end_src
**** help mode
#+begin_src emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'override
   :prefix "SPC h"
   "f" 'describe-function
   "v" 'describe-variable
   "k" 'describe-key)
#+end_src
**** config operations
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/conf.org"))
    
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/conf.org")))
    
  (general-define-key
   :states 'normal
   :keymaps 'override
   :prefix "SPC c"
   "r" 'config-reload
   "v" 'config-visit
   "e" 'config-visit)
#+end_src
** usage
*** editing
**** parenthesis
***** electric
#+begin_src emacs-lisp
  (electric-pair-mode t)
  
  (defun sk:electric-add-latex-parenthesis ()
    (interactive)
    (make-local-variable 'electric-pair-pairs)
    (add-to-list 'electric-pair-pairs '(36 . 36))) ;; $$

  (add-hook 'org-mode-hook 'sk:electric-add-latex-parenthesis)
  (add-hook 'LaTeX-mode-hook 'sk:electric-add-latex-parenthesis)
  
  (add-to-list 'electric-pair-pairs '(8218 . 8216)) ;; ‚‘
  (add-to-list 'electric-pair-pairs '(8222 . 8220)) ;; „“
#+end_src
***** surround.vim
#+begin_src emacs-lisp
  (use-package evil-surround
    :defer 1
    :ensure t
    :config (global-evil-surround-mode 1))
#+end_src
***** color parenthesis
#+begin_src emacs-lisp
  (show-paren-mode)
  (use-package rainbow-delimiters
    :demand t
    :ensure t
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src
**** alignment
#+begin_src emacs-lisp
  (use-package evil-lion
    :ensure t
    :defer 2)

  (general-define-key
   :states '(normal visual)
   :keymap 'override
   :prefix "g"
   "l" 'evil-lion-left
   "L" 'evil-lion-right)
#+end_src
*** inserting
**** autocompletion
***** company
#+begin_src emacs-lisp
  (use-package company
    :demand t
    :ensure t
    :config
    (setq company-idle-delay 0.3)
    (setq company-minimum-prefix-length 2)
    (add-hook 'after-init-hook 'company-tng-mode)
    (add-hook 'after-init-hook 'global-company-mode))

  (general-define-key
   :keymaps 'company-active-map
   "C-w" 'evil-delete-backward-word)
#+end_src
***** backends
#+begin_src emacs-lisp
  (use-package company-math
    :after company
    :ensure t
    :config
    (add-to-list 'company-backends 'company-math-symbols-unicode))
#+end_src
**** snippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :demand t
    :ensure t
    :config
    (yas-global-mode))

  (use-package yasnippet-snippets
    :after yasnippet
    :ensure t
    :config
    (yas-reload-all))
#+end_src
**** easier kill ring
=M-y= shows a completion from all previously cut stuff
#+begin_src emacs-lisp
  (use-package popup-kill-ring
    :ensure t)

  (general-define-key
   :states 'insert
   "M-y" 'popup-kill-ring)
#+end_src
*** visual aids
**** spell checking
#+begin_src emacs-lisp
  (setq flyspell-issue-message-flag nil)

  (defun sk:flyspell-mode ()
    (interactive)
    (if (bound-and-true-p flyspell-mode)
        (flyspell-mode 0)
      (flyspell-mode 1)
      (flyspell-buffer)))

  (general-define-key
   :states 'normal
   :keymaps 'override
   :prefix "SPC t"
   "s" 'sk:flyspell-mode
   "S" 'ispell-change-dictionary)
#+end_src
**** visual-fill-column-mode
for more focused writing
#+begin_src emacs-lisp
  (use-package visual-fill-column
    :ensure t
    :config
    (setq visual-fill-column-center-text t))

  (general-define-key
   :states 'normal
   :keymaps 'override
   :prefix "SPC t"
   "v" 'visual-fill-column-mode
   "V" 'set-fill-column)
#+end_src
**** text scale
#+begin_src emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'override
   :prefix "SPC"
   "0" 'text-scale-mode
   "+" 'text-scale-adjust
   "-" 'text-scale-adjust)
#+end_src
**** pretty symbols
pretty symbols for eye candy when editing code
#+begin_src emacs-lisp
  (use-package pretty-mode
    :defer 1
    :ensure t
    :config
    (add-hook 'python-mode-hook 'turn-on-pretty-mode))
#+end_src
** interaction
*** general settings
#+begin_src emacs-lisp
  (defalias 'yes-or-no 'y-or-n-p)
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
*** which key
#+begin_src emacs-lisp
  (use-package which-key
    :defer 4
    :ensure t
    :config
    (which-key-mode))
#+end_src
*** ido
replace default emacs menues with more interactive ones, e. g. when opening files
**** general settings
***** setup
#+begin_src emacs-lisp
  (setq ido-enable-flex-matching nil
        ido-create-new-buffer 'always
        ido-everywhere t)
  (ido-mode 1)
  
  (defun sk:ido-custom-keys ()
    (general-define-key
     :keymaps 'ido-completion-map
     "C-d" 'ido-kill-buffer-at-head
     "C-n" 'ido-next-match
     "C-j" 'ido-next-match
     "C-k" 'ido-prev-match
     "C-p" 'ido-prev-match))

  (add-hook 'ido-setup-hook 'sk:ido-custom-keys)
#+end_src
***** ido-vertical
#+begin_src emacs-lisp
  (use-package ido-vertical-mode
    :demand t
    :ensure t
    :config
    (ido-vertical-mode 1))
#+end_src
***** smex
wrapper around ido that improves =M-x=
#+begin_src emacs-lisp
  (use-package smex
    :demand t
    :ensure t
    :config (smex-initialize))

  (general-define-key
   :keymaps 'override
   "M-x" 'smex)

  (general-define-key
   :states 'normal
   :keymaps 'override
   "SPC x" 'smex)
#+end_src
**** more features
***** ignoring buffers
#+begin_src emacs-lisp
  (setq sk:ido-unignored-buffers '("*dashboard*"))

  (defun sk:ido-ignore-buffers-fun (name)
    "Ignore all *starred* buffers except the ones listed in sk:ido-unignored-buffers"
    (and (string-match "^\*" name)
        (not (member name sk:ido-unignored-buffers))))

  (add-to-list 'ido-ignore-buffers 'sk:ido-ignore-buffers-fun)
#+end_src
***** recent files
#+begin_src emacs-lisp
  (defun recentf-ido-find-file ()
    "Find a recent file using Ido."
    (interactive)
    (let ((file (ido-completing-read "Choose recent file: " recentf-list nil t)))
      (when file
        (find-file file))))
#+end_src
***** bookmarks
#+begin_src emacs-lisp
  (defun ido-bookmark-jump (bname)
    "Switch to bookmark interactively using `ido'."
    (interactive (list (ido-completing-read "Bookmark: " (bookmark-all-names) nil t)))
    (bookmark-jump bname))
  (add-hook 'after-init-hook 'bookmark-save)
#+end_src
* local config
exception: evil mode stuff
** julia
#+begin_src emacs-lisp
  (use-package julia-mode
    :ensure t)
#+end_src
** org
*** general settings
#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window) ;; don't spread across two windows
  
  (add-hook 'org-mode-hook 'org-indent-mode)
  
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
  (setq org-latex-packages-alist '())
  (add-to-list 'org-latex-packages-alist '("" "IEEEtrantools" t))
#+end_src
*** org-babel
**** setup
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
  
  (general-define-key
   :states 'normal
   "SPC o e" 'org-edit-src-exit)

  (general-define-key
   :states 'normal
   :keymaps 'org-mode-map
   "SPC o e" 'org-edit-special)
#+end_src
**** languages
#+begin_src emacs-lisp
  (use-package jupyter
    :ensure t)

  (org-babel-do-load-languages
   'org-babel-load-languages
   (append org-babel-load-languages
           '((jupyter . t))))
#+end_src
*** keybinds
- =C-c C-c=
  - evaluate src-block
  - numbered list reordering
  - table realignment
  - toggle checkboxes
- =C-c minus=
  - table insert hline
  - toggle item
  - cycle list bullet
#+begin_src emacs-lisp
  (use-package evil-org
    :defer 1
    :ensure t
    :config
    (add-hook 'org-mode-hook 'evil-org-mode))

  (general-define-key
   :states 'normal
   :keymaps 'org-mode-map
   "RET" 'org-ctrl-c-ctrl-c)

  (general-define-key
   :states 'normal
   :keymaps 'org-mode-map
   :prefix "SPC o"
   "o" 'org-ctrl-c-minus
   "-" 'org-ctrl-c-minus
   "i" 'org-ctrl-c-minus
   "b" 'org-ctrl-c-minus

   "E" 'org-babel-execute-buffer

   "TAB" 'org-table-toggle-column-width
   "<backtab>" '(lambda () (interactive) (org-table-toggle-column-width '(4)))
   "h" 'org-toggle-heading
   "c" '(lambda () (interactive) (org-ctrl-c-ctrl-c '(4)))
   "t" 'org-todo
   "X" 'org-export-dispatch
   "x" '(lambda () (interactive) (org-export-dispatch '(4))))

  (general-define-key
   :states 'normal
   :keymaps 'org-mode-map
   :prefix "SPC p"
   "p" 'org-latex-preview
   "P" '(lambda () (interactive) (org-latex-preview '(4)))
   "b" '(lambda () (interactive) (org-latex-preview '(16)))
   "B" '(lambda () (interactive) (org-latex-preview '(64)))
   "I" 'org-toggle-inline-images
   "i" 'org-display-inline-images)
#+end_src
** auctex
*** general settings
#+begin_src emacs-lisp
  (use-package auctex
    :ensure t
    :config
    (setq TeX-auto-save t
          TeX-parse-self t))
          
  (setq TeX-view-program-selection '((output-pdf "Zathura")))
  (setq preview-auto-cache-preamble t)
  
  (add-hook 'LaTeX-mode-hook 'prettify-symbols-mode)
  (setq-default preview-scale-function 1.5)
  
  (setq LaTeX-math-abbrev-prefix "'")
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)

  (setq texmathp-tex-commands '())
  (add-to-list 'texmathp-tex-commands (quote ("IEEEeqnarray" env-on
                                              "IEEEeqnarray*" env-on)))
#+end_src
*** keybinds
#+begin_src emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'LaTeX-mode-map
   :prefix "SPC l"
   "s" 'LaTeX-section           ;; insert section
   "e" 'LaTeX-environment       ;; insert environment
   "f" 'LaTeX-fill-environment  ;; auto-indent
   "l" 'TeX-command-master
   "L" 'TeX-command-run-all)
   
  (general-define-key
   :states 'normal
   :keymaps 'LaTeX-mode-map
   :prefix "SPC p"
   "p" 'preview-at-point
   "P" 'preview-clearout-at-point
   "b" 'preview-buffer
   "B" 'preview-clearout-buffer)
#+end_src
** docview
#+begin_src emacs-lisp
  (setq doc-view-continuous t)
  
  (defun sk:doc-view-goto-page (count)
    "Goto page COUNT
  if COUNT isn't supplied, go to the last page"
      (interactive "P")
      (if count
          (doc-view-goto-page count)
        (doc-view-last-page)))
        
  (general-define-key
   :states 'normal
   :keymaps 'doc-view-mode-map
   "G" 'sk:doc-view-goto-page)
#+end_src
** magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
    
  (add-hook 'git-commit-mode-hook 'evil-insert-state)
    
  (general-define-key
   :states 'normal
   :keymaps 'override
   :prefix "SPC"
   "g" 'magit-file-dispatch)
#+end_src
* appearance
** general settings
use visual instead of absolute or relative line numbers
visual line numbers are determined with lines visible on the screen instead of buffer lines.
for example, in ='visual= a fold is shown as 1 line, whereas in ='relative=, it is shown as the amount of lines that are folded (this subheading would then be 12 lines).
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  
  ;; display line / column numbers in modeline
  (line-number-mode 1)
  (column-number-mode 1)

  ;; display visual line numbers left of each buffer
  (setq display-line-numbers-type 'visual)
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode)
#+end_src
** theme
use =M-x customize-themes= to change theme settings
#+begin_src emacs-lisp
  (use-package doom-themes
    :demand t
    :ensure t
    :config (doom-themes-org-config)) ;; Corrects (and improves) org-mode's native fontification.

  (global-hl-line-mode)
#+end_src
** modeline
use doom-modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :demand t
    :ensure t
    :config
    (doom-modeline-mode 't))

  ;; needs to be set explicitly when running in server mode
  (setq doom-modeline-icon t
        doom-modeline-buffer-encoding nil)
#+end_src
** startup screen
#+begin_src emacs-lisp
  ;;(setq inhibit-startup-message t)
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))) ;; emacsclient defaults to *scratch*
  (use-package dashboard
    :demand t
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((bookmarks . 10) (recents . 10))
          dashboard-startup-banner 'logo
          dashboard-set-heading-icons t
          dashboard-set-file-icons t
          dashboard-center-content t))
#+end_src
